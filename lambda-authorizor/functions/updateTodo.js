"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
async function updateTodo(todo) {
    let params = {
        TableName: process.env.TODOS_TABLE,
        Key: {
            id: todo.id
        },
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "ALL_NEW"
    };
    let prefix = "set ";
    let attributes = Object.keys(todo);
    for (let i = 0; i < attributes.length; i++) { //{
        let attribute = attributes[i]; //   TableName: 'process.env.TODOS_TABLE', 
        if (attribute !== "id") { //    Key: { id: '1' },
            params["UpdateExpression"] += prefix + "#" + attribute + " = :" + attribute; //   UpdateExpression: 'set #title = :title, #done = :done',
            params["ExpressionAttributeNames"]["#" + attribute] = attribute; //   ExpressionAttributeNames: { '#title': 'title', '#done': 'done' },
            params["ExpressionAttributeValues"][":" + attribute] = todo[attribute]; //   ExpressionAttributeValues: { ':title': '2nd todo', ':done': true },
            prefix = ", "; //   ReturnValues: 'ALL_NEW' //  } 
        }
    }
    try {
        const updatedTodo = await docClient.update(params).promise();
        return updatedTodo.Attributes;
    }
    catch (err) {
        console.log('DynamoDB error: ', err);
        return null;
    }
}
exports.default = updateTodo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlVG9kby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZVRvZG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBV3BELEtBQUssVUFBVSxVQUFVLENBQUMsSUFBUztJQUMvQixJQUFJLE1BQU0sR0FBVztRQUNqQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO1FBQ2xDLEdBQUcsRUFBRTtZQUNELEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtTQUNkO1FBQ0QseUJBQXlCLEVBQUUsRUFBRTtRQUM3Qix3QkFBd0IsRUFBRSxFQUFFO1FBQzVCLGdCQUFnQixFQUFFLEVBQUU7UUFDcEIsWUFBWSxFQUFFLFNBQVM7S0FDMUIsQ0FBQztJQUNGLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRW5DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQW1ELEdBQUc7UUFDOUYsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQTZELDJDQUEyQztRQUN0SSxJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUUsRUFBbUUsdUJBQXVCO1lBQzlHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBVyw0REFBNEQ7WUFDbkosTUFBTSxDQUFDLDBCQUEwQixDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUF1QixzRUFBc0U7WUFDN0osTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFnQix3RUFBd0U7WUFDL0osTUFBTSxHQUFHLElBQUksQ0FBQyxDQUF5RSxtQ0FBbUM7U0FDN0g7S0FDSjtJQUVELElBQUk7UUFDQSxNQUFNLFdBQVcsR0FBRyxNQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDNUQsT0FBTyxXQUFXLENBQUMsVUFBVSxDQUFBO0tBQ2hDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3BDLE9BQU8sSUFBSSxDQUFBO0tBQ2Q7QUFDTCxDQUFDO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3QgZG9jQ2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG50eXBlIFBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICBLZXk6IHN0cmluZyB8IHt9LFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IGFueSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGFueSxcbiAgICBVcGRhdGVFeHByZXNzaW9uOiBzdHJpbmcsXG4gICAgUmV0dXJuVmFsdWVzOiBzdHJpbmdcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlVG9kbyh0b2RvOiBhbnkpIHtcbiAgICBsZXQgcGFyYW1zOiBQYXJhbXMgPSB7XG4gICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVE9ET1NfVEFCTEUsXG4gICAgICAgIEtleToge1xuICAgICAgICAgICAgaWQ6IHRvZG8uaWRcbiAgICAgICAgfSxcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge30sXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge30sXG4gICAgICAgIFVwZGF0ZUV4cHJlc3Npb246IFwiXCIsXG4gICAgICAgIFJldHVyblZhbHVlczogXCJBTExfTkVXXCJcbiAgICB9O1xuICAgIGxldCBwcmVmaXggPSBcInNldCBcIjtcbiAgICBsZXQgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKHRvZG8pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3tcbiAgICAgICAgbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgVGFibGVOYW1lOiAncHJvY2Vzcy5lbnYuVE9ET1NfVEFCTEUnLCBcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSAhPT0gXCJpZFwiKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgS2V5OiB7IGlkOiAnMScgfSxcbiAgICAgICAgICAgIHBhcmFtc1tcIlVwZGF0ZUV4cHJlc3Npb25cIl0gKz0gcHJlZml4ICsgXCIjXCIgKyBhdHRyaWJ1dGUgKyBcIiA9IDpcIiArIGF0dHJpYnV0ZTsgICAgICAgICAgIC8vICAgVXBkYXRlRXhwcmVzc2lvbjogJ3NldCAjdGl0bGUgPSA6dGl0bGUsICNkb25lID0gOmRvbmUnLFxuICAgICAgICAgICAgcGFyYW1zW1wiRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzXCJdW1wiI1wiICsgYXR0cmlidXRlXSA9IGF0dHJpYnV0ZTsgICAgICAgICAgICAgICAgICAgICAgIC8vICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7ICcjdGl0bGUnOiAndGl0bGUnLCAnI2RvbmUnOiAnZG9uZScgfSxcbiAgICAgICAgICAgIHBhcmFtc1tcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIl1bXCI6XCIgKyBhdHRyaWJ1dGVdID0gdG9kb1thdHRyaWJ1dGVdOyAgICAgICAgICAgICAgICAvLyAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHsgJzp0aXRsZSc6ICcybmQgdG9kbycsICc6ZG9uZSc6IHRydWUgfSxcbiAgICAgICAgICAgIHByZWZpeCA9IFwiLCBcIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBSZXR1cm5WYWx1ZXM6ICdBTExfTkVXJyAvLyAgfSBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRUb2RvID0gYXdhaXQgZG9jQ2xpZW50LnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKVxuICAgICAgICByZXR1cm4gdXBkYXRlZFRvZG8uQXR0cmlidXRlc1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnRHluYW1vREIgZXJyb3I6ICcsIGVycilcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZVRvZG87Il19